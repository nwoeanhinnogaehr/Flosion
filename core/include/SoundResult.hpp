#pragma once

#include <SingleSoundInput.hpp>
#include <SoundNode.hpp>
#include <SoundChunk.hpp>

#include <shared_mutex>

namespace flo {

    /**
     * SoundResult is a place where the sound stream generated by a
     * sound network can be accessed from outside - for example, to
     * play to the speakers, to write to a file, or for use by advanced
     * sound nodes which contain nested networks.
     */
    class SoundResult final : public Realtime<Uncontrolled<SoundNode, EmptySoundState>> {
    public:
        SoundResult();
        ~SoundResult();

        void getNextChunk(SoundChunk&);

        void reset();

        void setSource(SoundSource*) noexcept;

        SingleSoundInput& getInput() noexcept;
        const SingleSoundInput& getInput() const noexcept;

        CurrentTime currentTime;

    private:
        SingleSoundInput m_input;

        RecursiveSharedMutex m_mutex;

        virtual void findDependentSoundResults(std::vector<SoundResult*>& soundResults) noexcept override final;

        friend class SoundNode;
    };

} // namespace flo
